# Root
type Schema{
    query:Query
    mutation:Mutation
}

type Query {
    findAllMember: [Member]!
    findMemberById(memberId: ID): Member
    findMemberByType(memberType:String):[Member]
    findMember(memberId: ID,memberType:String): Member
}

type Mutation{
    createMember(input:MemberInput, claim:ClaimInput):Member
    deleteMember(memberId:ID!):String
    updateMember(memberId:ID!,firstName:String, lastName:String):String
}

type Member {
    memberId: ID!
    memberType: String
    firstName: String
    lastName: String
    dob: String
    ssn: String
    agn: ID
    dependentInfoList: DependentInformation
    claim:Claim
    address: Address
}

type Claim {
    id:String!
    claimId: String
    drugName: String
    drugNDC: String
    drugType: String
    providerName: String
    prescriberName: String
    pharmacyName: String
    claimAmount: Float
    createdDate: String
    memberId: String
}


type DependentInformation{
    relationship: String
    name:String
}

enum Relationship{
    SPOUSE
    CHILD
}

type Address {
    street: String
    city: String
    state: String
    zip: ID
    country: String
}

input MemberInput {
    memberId: ID!
    memberType: String
    firstName: String
    lastName: String
    dob: String
    ssn: String
    agn: ID
    dependentInfoList: DependentInformationInput
    address: AddressInput
}

input ClaimInput{
    claimId:String!
    drugName:String
    drugNDC:String
    drugType:String
    providerName:String
    prescriberName:String
    pharmacyName:String
    claimAmount:Float
    memberId:ID!
}

input DependentInformationInput {
    name: String
    relationship: Relationship
}

input AddressInput {
    street: String
    city: String
    state: String
    zip: ID
    country: String
}





